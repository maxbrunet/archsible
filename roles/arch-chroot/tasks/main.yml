---
# tasks file for arch-chroot

- name: Mount api filesystems
  mount:
    src: '{{ item.src }}'
    path: '{{ chroot_dir }}{{ item.path }}'
    fstype: '{{ item.fstype }}'
    opts: '{{ item.opts }}'
    state: mounted
  with_items: '{{ _chroot_mnt }}'
  loop_control:
    label: '{{ item.path }}'

- name: Stat maybe mounts
  stat:
    path: '{{ item.path }}'
  register: _chroot_maybe_stat
  with_items: '{{ _chroot_maybe_mnt }}'
  loop_control:
    label: '{{ item.path }}'

# The mount module will automatically creates the mountpoints
# if they don't exist, but creates only directories
# and mount binding requires a file
- name: Ensure parent directories of file mountpoints exist
  file:
    path: '{{ chroot_dir }}{{ item.item.path | dirname }}'
    state: directory
  when:
    - item.stat.exists
    - item.stat.isreg
  with_items: '{{ _chroot_maybe_stat.results }}'
  loop_control:
    label: '{{ item.item.path }}'

- name: Ensure file mountpoints exist
  file:
    path: '{{ chroot_dir }}{{ item.item.path }}'
    state: touch
  when:
    - item.stat.exists
    - item.stat.isreg
  with_items: '{{ _chroot_maybe_stat.results }}'
  loop_control:
    label: '{{ item.item.path }}'

- name: Maybe mount filesystems
  mount:
    src: '{{ item.item.src }}'
    path: '{{ chroot_dir }}{{ item.item.path }}'
    fstype: '{{ item.item.fstype }}'
    opts: '{{ item.item.opts }}'
    state: mounted
  when: item.stat.exists
  with_items: '{{ _chroot_maybe_stat.results }}'
  loop_control:
    label: '{{ item.item.path }}'
